{[ const token = context.token /]}
{[ const block = context.block /]}

{[ if token ]}
<div class="item">
    <div class="basic-info">
        {[ if (block.swatches) ]}
            {[ if (block.swatches.length > 1) ]}
                <div class="previews-side-by-side">
                    {[ for swatch in block.swatches ]}
                        {[ const themedToken = ds.tokensByApplyingThemes([token.id], swatch.selectedThemeIds) /]}
                        {[ const themes = ds.themesByIds(swatch.selectedThemeIds) /]}
                    
                        <div class="preview">
                            {[ inject "page_block_token_preview_small" context ({"token": themedToken[0], "themes": themes})  /]}
                            {[ inject "page_block_token_value" context themedToken[0] /]}       
                        </div>  
                    {[/]}
                </div>
            {[ elseif (block.swatches.length === 1) ]}
                {[ const swatch = block.swatches[0] /]}
                {[ const themedToken = ds.tokensByApplyingThemes([token.id], swatch.selectedThemeIds) /]}
                {[ const themes = ds.themesByIds(swatch.selectedThemeIds) /]}
                <div class="preview single-preview">
                    {[ inject "page_block_token_preview_small" context ({"token": themedToken[0], "themes": themes }) /]}
                    {[ inject "page_block_token_value" context themedToken[0] /]}         
                </div>
                
            {[/]}
        {[/]}
        <div class="info">
            <div class="name">
                {[ if (token.origin !== null && token.tokenType.equals("Shadow")) ]}
                    {{ token.origin.name.replacing("/", " / ") }}
                {[ else ]}
                    {{ token.name.replacing("/", " / ") }}
                {[/]}
            </div>
            
            {[ const configuration = exportConfiguration() /]}
            {[ const showReferences = configuration.blockConfigTokensShowReferences /]}
            
            {[ if showReferences ]}
                {[ if token.tokenType.equals("Color") ]}
                    {[ const colorRef = getColorTokenReference(token.value, ds) /]}
                    {[ if colorRef ]}
                        <div class="reference-value">{{ colorRef }}</div>
                    {[/]}
                {[/]}
                {[ if isDimensionToken(token.tokenType) ]}
                    {[ const measureRef = getMeasureTokenReference(token.value, ds) /]}
                    {[ if measureRef ]}
                        <div class="reference-value">{{ measureRef }}</div>
                    {[/]}
                {[/]}
                {[ if isStringToken(token.tokenType) ]}
                    {[ const textRef = getTextTokenReference(token.value, ds) /]}
                    {[ if textRef ]}
                        <div class="reference-value">{{ textRef }}</div>
                    {[/]}
                {[/]}
            {[/]}
            
            <div class="resolved-value">
                {[ if token.tokenType.equals("Color") ]}
                    {{ getFormattedColor(token.value, false, null, false) }}
                {[ elseif isDimensionToken(token.tokenType) ]}
                    {{ measureValueToReadableUnit(token.value, false) }}
                {[ elseif isStringToken(token.tokenType) ]}
                    {{ token.value.text }}
                {[ elseif token.tokenType.equals("Opacity") ]}
                    {{ decimalOpacityToPercentage(token.value) }}
                {[ else ]}
                    {{ token.value }}
                {[/]}
            </div>
            
            {[ if token.description ]}
                <div class="description">{{ token.description }}</div>
            {[/]}
        </div>
    </div>
    {[ inject "page_block_token_properties" context ({"token": token, "block": block})  /]}
</div>
{[/]}