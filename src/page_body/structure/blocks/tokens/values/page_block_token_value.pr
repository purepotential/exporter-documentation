{[ let token = context /]}
{[ const configuration = exportConfiguration() /]}
{[ const showReferences = configuration.blockConfigTokensShowReferences /]}

<div class="token-value-structured">
    {* Get resolved value without reference *}
    {[ let resolvedValue = "" /]}
    {[ let referenceValue = "" /]}
    
    {[ if token.tokenType.equals("Color") ]}
        {[ resolvedValue = getFormattedColor(token.value, false, null, false) /]}
        {[ referenceValue = getColorTokenReference(token.value) /]}
    {[ elseif token.tokenType.equals("Blur") ]}
        {[ switch token.value.type ]}
            {[ case "Background" ]}
                {[ resolvedValue = "backdrop-filter: blur(" + measureValueToReadableUnit(token.value.radius, false) + ")" /]}
            {[ case "Layer" ]}
                {[ resolvedValue = "filter: blur(" + measureValueToReadableUnit(token.value.radius, false) + ")" /]}
        {[/]}
        {[ referenceValue = getMeasureTokenReference(token.value.radius) /]}
    {[ elseif token.tokenType.equals("Border") ]}
        {[ resolvedValue = measureValueToReadableUnit(token.value.width, false) + " " + getBorderStyleValue(token.value.style) + " " + getFormattedColor(token.value.color, false, null, false) /]}
        {[ const widthRef = getMeasureTokenReference(token.value.width) /]}
        {[ const colorRef = getColorTokenReference(token.value.color) /]}
        {[ if (widthRef || colorRef) ]}
            {[ referenceValue = (widthRef ? "Width: " + widthRef : "") + (widthRef && colorRef ? ", " : "") + (colorRef ? "Color: " + colorRef : "") /]}
        {[/]}
    {[ elseif token.tokenType.equals("Font") ]}
        {[ resolvedValue = token.value.fontFamily.text + " " + token.value.fontWeight.text /]}
        {[ const fontFamilyRef = getTextTokenReference(token.value.fontFamily) /]}
        {[ const fontWeightRef = getTextTokenReference(token.value.fontWeight) /]}
        {[ if (fontFamilyRef || fontWeightRef) ]}
            {[ referenceValue = (fontFamilyRef ? "Font: " + fontFamilyRef : "") + (fontFamilyRef && fontWeightRef ? ", " : "") + (fontWeightRef ? "Weight: " + fontWeightRef : "") /]}
        {[/]}
    {[ elseif token.tokenType.equals("Gradient") ]}
        {[ resolvedValue = gradientDescription(token) /]}
    {[ elseif token.tokenType.equals("Shadow") ]}
        {[ resolvedValue = shadowDescription(token) /]}
    {[ elseif token.tokenType.equals("Typography") ]}
        {[ resolvedValue = typographyDescription(token) /]}
        {[ const complexRefs = getComplexTokenReferences(token) /]}
        {[ if complexRefs.length > 0 ]}
            {[ referenceValue = complexRefs.join(", ") /]}
        {[/]}
    {[ elseif token.tokenType.equals("Opacity") ]}
        {[ resolvedValue = decimalOpacityToPercentage(token.value) /]}
        {[ referenceValue = getMeasureTokenReference(token.value) /]}
    {[ elseif token.tokenType.equals("TextCase") ]}
        {[ resolvedValue = convertTextCaseToTextTransform(token.value.value) /]}
    {[ elseif (token.tokenType.equals("String") || token.tokenType.equals("ProductCopy")) ]}
        {* no value displayed, the value is part of the preview*}
    {[ elseif isStringToken(token.tokenType) ]}
        {[ resolvedValue = token.value.text /]}
        {[ referenceValue = getTextTokenReference(token.value) /]}
    {[ elseif isOptionsToken(token.tokenType) ]}
        {[ resolvedValue = token.value.value /]}
    {[ elseif (isDimensionToken(token.tokenType)) ]}
        {[ resolvedValue = measureValueToReadableUnit(token.value, false) /]}
        {[ referenceValue = getMeasureTokenReference(token.value) /]}
    {[/]}
    
    {* Display structured format *}
    {[ if showReferences && referenceValue ]}
        <div class="token-reference-line">
            <span class="token-reference-label">Reference:</span>
            <span class="token-reference-value">{{ referenceValue }}</span>
        </div>
    {[/]}
    
    <div class="token-resolved-line">
        <span class="token-resolved-label">Value:</span>
        <span class="token-resolved-value">{{ resolvedValue }}</span>
    </div>
    
    {[ if token.description ]}
        <div class="token-description-line">
            <span class="token-description-text">{{ token.description }}</span>
        </div>
    {[/]}
</div>