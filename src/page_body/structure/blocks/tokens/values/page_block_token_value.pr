{[ let token = context /]}
{[ const configuration = exportConfiguration() /]}
{[ const showReferences = configuration.blockConfigTokensShowReferences /]}

<span class="token-value">
{[ if token.tokenType.equals("Color") ]}
    {{getFormattedColor(token.value, false, null, showReferences)}}
{[ elseif token.tokenType.equals("Blur") ]}
    {[ switch token.value.type ]}
        {[ case "Background" ]}
            backdrop-filter: blur({{ measureValueToReadableUnit(token.value.radius, showReferences) }})
        {[ case "Layer" ]}
            filter: blur({{ measureValueToReadableUnit(token.value.radius, showReferences) }})
    {[/]}
{[ elseif token.tokenType.equals("Border") ]}
    {{ measureValueToReadableUnit(token.value.width, showReferences) }} {{ getBorderStyleValue(token.value.style) }} {{ getFormattedColor(token.value.color, false, null, showReferences) }}
{[ elseif token.tokenType.equals("Font") ]}
    {{ token.value.fontFamily.text }} {{ token.value.fontWeight.text }}
    {[ if showReferences ]}
        {[ const fontFamilyRef = getTextTokenReference(token.value.fontFamily) /]}
        {[ const fontWeightRef = getTextTokenReference(token.value.fontWeight) /]}
        {[ if (fontFamilyRef || fontWeightRef) ]}
            <span class="token-references">
                {[ if fontFamilyRef ]}(Font: {{ fontFamilyRef }}){[/]}
                {[ if fontWeightRef ]} (Weight: {{ fontWeightRef }}){[/]}
            </span>
        {[/]}
    {[/]}
{[ elseif token.tokenType.equals("Gradient") ]}
    {{ gradientDescription(token) }}
{[ elseif token.tokenType.equals("Shadow")]}
    {{ shadowDescription(token) }}
{[ elseif token.tokenType.equals("Typography") ]}
    {{ displayTokenWithReference(token, {"showReference": showReferences}) }}
{[ elseif token.tokenType.equals("Opacity") ]}
    {{ decimalOpacityToPercentage(token.value) }}
    {[ if (showReferences && getMeasureTokenReference(token.value)) ]}
        <span class="token-reference">({{ getMeasureTokenReference(token.value) }})</span>
    {[/]}
{[ elseif token.tokenType.equals("TextCase")]}
    {{ convertTextCaseToTextTransform(token.value.value) }}
{[ elseif (token.tokenType.equals("String") || token.tokenType.equals("ProductCopy"))]}
    {* no value displayed, the value is part of the preview*}
{[ elseif isStringToken(token.tokenType)]}
    {{ token.value.text }}
    {[ if (showReferences && getTextTokenReference(token.value)) ]}
        <span class="token-reference">({{ getTextTokenReference(token.value) }})</span>
    {[/]}
{[ elseif isOptionsToken(token.tokenType)]}
    {{ token.value.value }}
{[ elseif (isDimensionToken(token.tokenType))]}
    {{ measureValueToReadableUnit(token.value, showReferences) }}
{[/]}
</span>