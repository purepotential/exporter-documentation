{[ let token = context /]}
{[ const configuration = exportConfiguration() /]}
{[ const showReferences = configuration.blockConfigTokensShowReferences /]}

<div class="token-value-structured">
    {* Display structured format *}
    <div class="token-name-line">
        <span class="token-name-label">Token name:</span>
        <span class="token-name-value">"{{ token.name }}"</span>
    </div>
    
    {[ if showReferences ]}
        {[ if token.tokenType.equals("Color") ]}
            {[ const colorRef = getColorTokenReference(token.value) /]}
            {[ if colorRef ]}
                <div class="token-reference-line">
                    <span class="token-reference-label">Reference value:</span>
                    <span class="token-reference-value">"{{ colorRef }}"</span>
                </div>
            {[/]}
        {[/]}
        {[ if isDimensionToken(token.tokenType) ]}
            {[ const measureRef = getMeasureTokenReference(token.value) /]}
            {[ if measureRef ]}
                <div class="token-reference-line">
                    <span class="token-reference-label">Reference value:</span>
                    <span class="token-reference-value">"{{ measureRef }}"</span>
                </div>
            {[/]}
        {[/]}
        {[ if isStringToken(token.tokenType) ]}
            {[ const textRef = getTextTokenReference(token.value) /]}
            {[ if textRef ]}
                <div class="token-reference-line">
                    <span class="token-reference-label">Reference value:</span>
                    <span class="token-reference-value">"{{ textRef }}"</span>
                </div>
            {[/]}
        {[/]}
    {[/]}
    
    <div class="token-resolved-line">
        <span class="token-resolved-label">Resolved value:</span>
        <span class="token-resolved-value">
            {[ if token.tokenType.equals("Color") ]}
                "{{ getFormattedColor(token.value, false, null, false) }}"
            {[ elseif isDimensionToken(token.tokenType) ]}
                "{{ measureValueToReadableUnit(token.value, false) }}"
            {[ elseif isStringToken(token.tokenType) ]}
                "{{ token.value.text }}"
            {[ elseif token.tokenType.equals("Opacity") ]}
                "{{ decimalOpacityToPercentage(token.value) }}"
            {[ else ]}
                "{{ token.value }}"
            {[/]}
        </span>
    </div>
    
    {[ if token.description ]}
        <div class="token-description-line">
            <span class="token-description-text">{{ token.description }}</span>
        </div>
    {[ else ]}
        <div class="token-description-line">
            <span class="token-description-placeholder">(space for token description)</span>
        </div>
    {[/]}
</div>