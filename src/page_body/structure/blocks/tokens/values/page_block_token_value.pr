{[ let token = context /]}
{[ const configuration = exportConfiguration() /]}
{[ const showReferences = configuration.blockConfigTokensShowReferences /]}
{[ const referenceStyle = configuration.blockConfigTokensReferenceStyle /]}

{* SIMPLE TEST - This should always show *}
<div style="background: red; color: white; padding: 4px; margin: 4px 0; font-weight: bold;">
    ðŸ”´ TOKEN TEMPLATE IS WORKING - {{ token.name }} ({{ token.tokenType }})
</div>

{* Debug: Show configuration status *}
<div class="token-reference-status" style="background: {{ showReferences ? '#e8f5e8' : '#f5e8e8' }}; padding: 4px 8px; font-size: 0.8em; margin-bottom: 8px; border-radius: 4px;">
    {{ showReferences ? 'âœ“ References enabled' : 'âœ— References disabled' }} ({{ referenceStyle }})
</div>

<div class="token-value-container">
    <span class="token-value">
    {[ if token.tokenType.equals("Color") ]}
        {[ const resolvedColor = getFormattedColor(token.value, false, null, false) /]}
        {[ const colorRef = getColorTokenReference(token.value) /]}
        {{ resolvedColor }}
        {[ if (showReferences && colorRef) ]}
            <span class="token-reference"> â†’ {{ colorRef }}</span>
        {[/]}
        {[ if showReferences ]}
            <div class="token-reference-info">
                <strong>Resolved:</strong> {{ resolvedColor }}<br>
                <strong>Reference:</strong> {{ colorRef || "No reference" }}
            </div>
        {[/]}
{[ elseif token.tokenType.equals("Blur") ]}
    {[ switch token.value.type ]}
        {[ case "Background" ]}
            backdrop-filter: blur({{ measureValueToReadableUnit(token.value.radius, showReferences) }})
        {[ case "Layer" ]}
            filter: blur({{ measureValueToReadableUnit(token.value.radius, showReferences) }})
    {[/]}
{[ elseif token.tokenType.equals("Border") ]}
    {{ measureValueToReadableUnit(token.value.width, showReferences) }} {{ getBorderStyleValue(token.value.style) }} {{ getFormattedColor(token.value.color, false, null, showReferences) }}
{[ elseif token.tokenType.equals("Font") ]}
    {{ token.value.fontFamily.text }} {{ token.value.fontWeight.text }}
    {[ if (showReferences && (getTextTokenReference(token.value.fontFamily) || getTextTokenReference(token.value.fontWeight))) ]}
        <span class="token-references">
            {[ if getTextTokenReference(token.value.fontFamily) ]}(Font: {{ getTextTokenReference(token.value.fontFamily) }}){[/]}
            {[ if getTextTokenReference(token.value.fontWeight) ]} (Weight: {{ getTextTokenReference(token.value.fontWeight) }}){[/]}
        </span>
    {[/]}
{[ elseif token.tokenType.equals("Gradient") ]}
    {{ gradientDescription(token) }}
{[ elseif token.tokenType.equals("Shadow")]}
    {{ shadowDescription(token) }}
{[ elseif token.tokenType.equals("Typography") ]}
    {{ displayTokenWithReference(token, {"showReference": showReferences}) }}
{[ elseif token.tokenType.equals("Opacity") ]}
    {{ decimalOpacityToPercentage(token.value) }}
    {[ if (showReferences && getMeasureTokenReference(token.value)) ]}
        <span class="token-reference">({{ getMeasureTokenReference(token.value) }})</span>
    {[/]}
{[ elseif token.tokenType.equals("TextCase")]}
    {{ convertTextCaseToTextTransform(token.value.value) }}
{[ elseif (token.tokenType.equals("String") || token.tokenType.equals("ProductCopy"))]}
    {* no value displayed, the value is part of the preview*}
{[ elseif isStringToken(token.tokenType)]}
    {{ token.value.text }}
    {[ if (showReferences && getTextTokenReference(token.value)) ]}
        <span class="token-reference">({{ getTextTokenReference(token.value) }})</span>
    {[/]}
{[ elseif isOptionsToken(token.tokenType)]}
    {{ token.value.value }}
{[ elseif (isDimensionToken(token.tokenType))]}
        {[ const resolvedMeasure = measureValueToReadableUnit(token.value, false) /]}
        {[ const measureRef = getMeasureTokenReference(token.value) /]}
        {{ resolvedMeasure }}
        {[ if (showReferences && measureRef) ]}
            <span class="token-reference"> â†’ {{ measureRef }}</span>
        {[/]}
        {[ if showReferences ]}
            <div class="token-reference-info">
                <strong>Resolved:</strong> {{ resolvedMeasure }}<br>
                <strong>Reference:</strong> {{ measureRef || "No reference" }}
            </div>
        {[/]}
    {[/]}
    </span>
</div>

{[ if showReferences ]}
    <div class="token-reference-debug" style="background: #f0f0f0; padding: 4px; margin: 4px 0; font-size: 0.7em; border-radius: 3px;">
        <strong>Debug Info:</strong><br>
        â€¢ Token Name: {{ token.name }}<br>
        â€¢ Token Type: {{ token.tokenType }}<br>
        â€¢ Show References: {{ showReferences }}<br>
        {[ if token.tokenType.equals("Color") ]}
            â€¢ Color Value: {{ getFormattedColor(token.value, false, null, false) }}<br>
            â€¢ Referenced Token ID: {{ token.value.referencedTokenId || "none" }}<br>
            â€¢ Referenced Token Name: {{ getColorTokenReference(token.value) || "none" }}<br>
            â€¢ Has Reference: {{ hasTokenValueReference(token.value) }}<br>
        {[ elseif (isDimensionToken(token.tokenType)) ]}
            â€¢ Measure Value: {{ measureValueToReadableUnit(token.value, false) }}<br>
            â€¢ Referenced Token ID: {{ token.value.referencedTokenId || "none" }}<br>
            â€¢ Referenced Token Name: {{ getMeasureTokenReference(token.value) || "none" }}<br>
            â€¢ Has Reference: {{ hasTokenValueReference(token.value) }}<br>
        {[/]}
        â€¢ Reference Style: {{ referenceStyle }}<br>
    </div>
{[/]}

{[ if (showReferences && referenceStyle.equals("Detailed list for complex tokens")) ]}
    {[ const complexRefs = getComplexTokenReferences(token) /]}
    {[ if (complexRefs.length > 0) ]}
        <div class="token-complex-references">
            {{ formatReferenceList(complexRefs) }}
        </div>
    {[/]}
{[/]}