{* Custom Token Preview Block *}
{[ const block = context /]}
{[ const configuration = exportConfiguration() /]}

{[ if block.tokenId ]}
    {[ const token = ds.tokenById(block.tokenId) /]}
    {[ const showReferences = block.showReferences !== undefined ? block.showReferences : true /]}
    {[ const showResolvedValue = block.showResolvedValue !== undefined ? block.showResolvedValue : true /]}
    {[ const displayStyle = block.displayStyle || "Inline" /]}
    
    {[ if token ]}
        <div class="custom-token-preview" data-style="{{ displayStyle.toLowerCase() }}">
            
            {[ if displayStyle.equals("Card") ]}
                <div class="token-preview-card">
                    <div class="token-header">
                        <h4 class="token-name">{{ token.name }}</h4>
                        <span class="token-type">{{ token.tokenType }}</span>
                    </div>
                    
                    {[ if showResolvedValue ]}
                        <div class="token-resolved-value">
                            <strong>Resolved Value:</strong>
                            <span class="value">{{ displayTokenWithReference(token, {"showReference": false}) }}</span>
                        </div>
                    {[/]}
                    
                    {[ if showReferences ]}
                        <div class="token-reference-info">
                            {[ if token.tokenType.equals("Color") ]}
                                {[ const colorRef = getColorTokenReference(token.value) /]}
                                {[ if colorRef ]}
                                    <div class="reference-item">
                                        <strong>References:</strong> {{ colorRef }}
                                    </div>
                                {[ else ]}
                                    <div class="reference-item">
                                        <em>No reference (base token)</em>
                                    </div>
                                {[/]}
                            {[ elseif isDimensionToken(token.tokenType) ]}
                                {[ const measureRef = getMeasureTokenReference(token.value) /]}
                                {[ if measureRef ]}
                                    <div class="reference-item">
                                        <strong>References:</strong> {{ measureRef }}
                                    </div>
                                {[ else ]}
                                    <div class="reference-item">
                                        <em>No reference (base token)</em>
                                    </div>
                                {[/]}
                            {[ elseif token.tokenType.equals("Typography") ]}
                                {[ const complexRefs = getComplexTokenReferences(token) /]}
                                {[ if complexRefs.length > 0 ]}
                                    <div class="reference-item">
                                        <strong>References:</strong>
                                        <ul class="reference-list">
                                            {[ for ref in complexRefs ]}
                                                <li>{{ ref }}</li>
                                            {[/]}
                                        </ul>
                                    </div>
                                {[ else ]}
                                    <div class="reference-item">
                                        <em>No references (base token)</em>
                                    </div>
                                {[/]}
                            {[ elseif isStringToken(token.tokenType) ]}
                                {[ const textRef = getTextTokenReference(token.value) /]}
                                {[ if textRef ]}
                                    <div class="reference-item">
                                        <strong>References:</strong> {{ textRef }}
                                    </div>
                                {[ else ]}
                                    <div class="reference-item">
                                        <em>No reference (base token)</em>
                                    </div>
                                {[/]}
                            {[/]}
                        </div>
                    {[/]}
                    
                    {[ if token.description ]}
                        <div class="token-description">
                            <strong>Description:</strong> {{ token.description }}
                        </div>
                    {[/]}
                </div>
                
            {[ elseif displayStyle.equals("Detailed") ]}
                <div class="token-preview-detailed">
                    <div class="token-info">
                        <span class="token-name">{{ token.name }}</span>
                        <span class="token-type">({{ token.tokenType }})</span>
                    </div>
                    
                    <div class="token-values">
                        {[ if showResolvedValue ]}
                            <div class="resolved-value">
                                <strong>Value:</strong> {{ displayTokenWithReference(token, {"showReference": false}) }}
                            </div>
                        {[/]}
                        
                        {[ if showReferences ]}
                            {[ if token.tokenType.equals("Color") ]}
                                {[ const colorRef = getColorTokenReference(token.value) /]}
                                <div class="reference-value">
                                    <strong>Reference:</strong> {{ colorRef || "None (base token)" }}
                                </div>
                            {[ elseif isDimensionToken(token.tokenType) ]}
                                {[ const measureRef = getMeasureTokenReference(token.value) /]}
                                <div class="reference-value">
                                    <strong>Reference:</strong> {{ measureRef || "None (base token)" }}
                                </div>
                            {[ elseif isStringToken(token.tokenType) ]}
                                {[ const textRef = getTextTokenReference(token.value) /]}
                                <div class="reference-value">
                                    <strong>Reference:</strong> {{ textRef || "None (base token)" }}
                                </div>
                            {[/]}
                        {[/]}
                    </div>
                </div>
                
            {[ else ]}
                {* Inline style (default) *}
                <div class="token-preview-inline">
                    <strong>{{ token.name }}:</strong>
                    {[ if showResolvedValue ]}
                        {{ displayTokenWithReference(token, {"showReference": showReferences}) }}
                    {[ elseif showReferences ]}
                        {[ if token.tokenType.equals("Color") ]}
                            {{ getColorTokenReference(token.value) || "No reference" }}
                        {[ elseif isDimensionToken(token.tokenType) ]}
                            {{ getMeasureTokenReference(token.value) || "No reference" }}
                        {[ elseif isStringToken(token.tokenType) ]}
                            {{ getTextTokenReference(token.value) || "No reference" }}
                        {[/]}
                    {[/]}
                </div>
            {[/]}
        </div>
        
    {[ else ]}
        <div class="token-preview-error">
            <p><strong>Error:</strong> Token not found (ID: {{ block.tokenId }})</p>
        </div>
    {[/]}
    
{[ else ]}
    <div class="token-preview-placeholder">
        <p><em>Select a token to preview its resolved value and references</em></p>
    </div>
{[/]}