{* Token List with References Block *}
{[ let block = context /]}

{* Get tokens from tokenIds *}
{[ let tokens = [] /]}
{[ if block.tokenIds && block.tokenIds.trim() !== "" ]}
    {[ tokens = getTokensFromIds(block.tokenIds, ds) /]}
{[/]}

{* Configuration *}
{[ let showReferences = true /]}
{[ let displayVariant = "Table" /]}

{[ if tokens.length > 0 ]}
    <div class="custom-token-list-with-references">
        
        {* Header *}
        <div class="token-list-header">
            <h4>{{ tokens.length }} Token{{ tokens.length !== 1 ? "s" : "" }}</h4>
            {[ if showReferences ]}
                <span class="references-enabled">References: ON</span>
            {[/]}
        </div>

        {* Display tokens based on variant *}
        {[ if displayVariant.equals("Table") ]}
            <table class="token-table">
                <thead>
                    <tr>
                        <th>Token</th>
                        <th>Type</th>
                        <th>Value</th>
                        {[ if showReferences ]}
                            <th>Reference</th>
                        {[/]}
                    </tr>
                </thead>
                <tbody>
                    {[ for token in tokens ]}
                        <tr>
                            <td><strong>{{ token.name }}</strong></td>
                            <td>{{ token.tokenType }}</td>
                            <td>{[ inject "page_block_token_value" context token /]}</td>
                            {[ if showReferences ]}
                                <td>
                                    {{ getTokenReferenceSummary(token) }}
                                    {{ formatTokenReferenceDetailsAsHtml(token) }}
                                </td>
                            {[/]}
                        </tr>
                    {[/]}
                </tbody>
            </table>
            
        {[ elseif displayVariant.equals("Grid") ]}
            <div class="token-grid">
                {[ for token in tokens ]}
                    <div class="token-card">
                        <h5>{{ token.name }}</h5>
                        <p><strong>Type:</strong> {{ token.tokenType }}</p>
                        <p><strong>Value:</strong> {[ inject "page_block_token_value" context token /]}</p>
                        {[ if showReferences ]}
                            <div class="reference-section">
                                <strong>References:</strong>
                                {{ displayTokenWithReferenceBadges(token) }}
                            </div>
                        {[/]}
                    </div>
                {[/]}
            </div>
            
        {[ else ]}
            {* Stack variant *}
            <div class="token-stack">
                {[ for token in tokens ]}
                    <div class="token-stack-item">
                        <span class="token-name">{{ token.name }}</span>
                        <span class="token-value">{[ inject "page_block_token_value" context token /]}</span>
                        {[ if showReferences ]}
                            <div class="stack-references">
                                {{ displayTokenWithReferenceItems(token) }}
                            </div>
                        {[/]}
                    </div>
                {[/]}
            </div>
        {[/]}
    </div>
    
{[ else ]}
    <div class="token-list-empty">
        <p>Enter token IDs separated by commas to display tokens with references.</p>
        <p><small>Example: spacing-xs,spacing-sm,spacing-base</small></p>
    </div>
{[/]}