{* Token List with References Block *}
{[ const block = context /]}
{[ const configuration = exportConfiguration() /]}

{* Get tokens from tokenIds *}
{[ let tokens = [] /]}
{[ if block.tokenIds && block.tokenIds.trim() !== "" ]}
    {[ tokens = getTokensFromIds(block.tokenIds, ds) /]}
{[/]}

{* Configuration *}
{[ const showReferences = block.showReferences !== undefined ? block.showReferences : true /]}
{[ const displayVariant = block.displayVariant || "Table" /]}

{[ if tokens.length > 0 ]}
    <div class="custom-token-list-with-references">
        
        {* Header *}
        <div class="token-list-header">
            <h4>{{ tokens.length }} Token{{ tokens.length !== 1 ? "s" : "" }}</h4>
            {[ if showReferences ]}
                <span class="references-enabled">References: ON</span>
            {[/]}
        </div>

        {* Display tokens based on variant *}
        {[ if displayVariant.equals("Table") ]}
            <table class="token-table">
                <thead>
                    <tr>
                        <th>Token</th>
                        <th>Type</th>
                        <th>Value</th>
                        {[ if showReferences ]}
                            <th>Reference</th>
                        {[/]}
                    </tr>
                </thead>
                <tbody>
                    {[ for token in tokens ]}
                        <tr>
                            <td><strong>{{ token.name }}</strong></td>
                            <td>{{ token.tokenType }}</td>
                            <td>{[ inject "page_block_token_value" context token /]}</td>
                            {[ if showReferences ]}
                                <td>
                                    {[ if token.tokenType.equals("Color") ]}
                                        {[ const colorRef = getColorTokenReference(token.value) /]}
                                        {{ colorRef || "Base token" }}
                                    {[ elseif token.tokenType.equals("Typography") ]}
                                        {[ const fontFamilyRef = getTextTokenReference(token.value.fontFamily) /]}
                                        {[ const fontWeightRef = getTextTokenReference(token.value.fontWeight) /]}
                                        {[ const fontSizeRef = getMeasureTokenReference(token.value.fontSize) /]}
                                        {[ const lineHeightRef = (token.value.lineHeight ? getMeasureTokenReference(token.value.lineHeight) : null) /]}
                                        {[ let refCount = 0 /]}
                                        {[ if fontFamilyRef ]}{[ refCount = refCount + 1 /]}{[/]}
                                        {[ if fontWeightRef ]}{[ refCount = refCount + 1 /]}{[/]}
                                        {[ if fontSizeRef ]}{[ refCount = refCount + 1 /]}{[/]}
                                        {[ if lineHeightRef ]}{[ refCount = refCount + 1 /]}{[/]}
                                        
                                        {[ if refCount > 0 ]}
                                            <div class="complex-references">
                                                <strong>{{ refCount }} reference{{ refCount !== 1 ? "s" : "" }}</strong>
                                                <div class="reference-details">
                                                    {[ if fontFamilyRef ]}<div>Font: {{ fontFamilyRef }}</div>{[/]}
                                                    {[ if fontWeightRef ]}<div>Weight: {{ fontWeightRef }}</div>{[/]}
                                                    {[ if fontSizeRef ]}<div>Size: {{ fontSizeRef }}</div>{[/]}
                                                    {[ if lineHeightRef ]}<div>Line Height: {{ lineHeightRef }}</div>{[/]}
                                                </div>
                                            </div>
                                        {[ else ]}
                                            Base token
                                        {[/]}
                                    {[ elseif token.tokenType.equals("Shadow") ]}
                                        {[ let shadowRefCount = 0 /]}
                                        {[ for shadowValue in token.value ]}
                                            {[ const colorRef = getColorTokenReference(shadowValue.color) /]}
                                            {[ if colorRef ]}{[ shadowRefCount = shadowRefCount + 1 /]}{[/]}
                                        {[/]}
                                        
                                        {[ if shadowRefCount > 0 ]}
                                            <div class="complex-references">
                                                <strong>{{ shadowRefCount }} color reference{{ shadowRefCount !== 1 ? "s" : "" }}</strong>
                                                <div class="reference-details">
                                                    {[ for shadowValue in token.value ]}
                                                        {[ const colorRef = getColorTokenReference(shadowValue.color) /]}
                                                        {[ if colorRef ]}<div>Shadow {{ loop.index + 1 }}: {{ colorRef }}</div>{[/]}
                                                    {[/]}
                                                </div>
                                            </div>
                                        {[ else ]}
                                            Base token
                                        {[/]}
                                    {[ elseif token.tokenType.equals("Gradient") ]}
                                        {[ let gradientRefCount = 0 /]}
                                        {[ for gradientValue in token.value ]}
                                            {[ for stop in gradientValue.stops ]}
                                                {[ const colorRef = getColorTokenReference(stop.color) /]}
                                                {[ if colorRef ]}{[ gradientRefCount = gradientRefCount + 1 /]}{[/]}
                                            {[/]}
                                        {[/]}
                                        
                                        {[ if gradientRefCount > 0 ]}
                                            <div class="complex-references">
                                                <strong>{{ gradientRefCount }} color reference{{ gradientRefCount !== 1 ? "s" : "" }}</strong>
                                            </div>
                                        {[ else ]}
                                            Base token
                                        {[/]}
                                    {[ elseif isDimensionToken(token.tokenType) ]}
                                        {[ const measureRef = getMeasureTokenReference(token.value) /]}
                                        {{ measureRef || "Base token" }}
                                    {[ elseif isStringToken(token.tokenType) ]}
                                        {[ const textRef = getTextTokenReference(token.value) /]}
                                        {{ textRef || "Base token" }}
                                    {[ else ]}
                                        â€”
                                    {[/]}
                                </td>
                            {[/]}
                        </tr>
                    {[/]}
                </tbody>
            </table>
            
        {[ elseif displayVariant.equals("Grid") ]}
            <div class="token-grid">
                {[ for token in tokens ]}
                    <div class="token-card">
                        <h5>{{ token.name }}</h5>
                        <p><strong>Type:</strong> {{ token.tokenType }}</p>
                        <p><strong>Value:</strong> {[ inject "page_block_token_value" context token /]}</p>
                        {[ if showReferences ]}
                            <div class="reference-section">
                                <strong>References:</strong>
                                {[ if token.tokenType.equals("Color") ]}
                                    {[ const colorRef = getColorTokenReference(token.value) /]}
                                    <div class="reference-badge">{{ colorRef || "Base token" }}</div>
                                {[ elseif token.tokenType.equals("Typography") ]}
                                    {[ const fontFamilyRef = getTextTokenReference(token.value.fontFamily) /]}
                                    {[ const fontWeightRef = getTextTokenReference(token.value.fontWeight) /]}
                                    {[ const fontSizeRef = getMeasureTokenReference(token.value.fontSize) /]}
                                    {[ const lineHeightRef = (token.value.lineHeight ? getMeasureTokenReference(token.value.lineHeight) : null) /]}
                                    
                                    <div class="reference-badges">
                                        {[ if fontFamilyRef ]}<div class="reference-badge small">Font: {{ fontFamilyRef }}</div>{[/]}
                                        {[ if fontWeightRef ]}<div class="reference-badge small">Weight: {{ fontWeightRef }}</div>{[/]}
                                        {[ if fontSizeRef ]}<div class="reference-badge small">Size: {{ fontSizeRef }}</div>{[/]}
                                        {[ if lineHeightRef ]}<div class="reference-badge small">Line Height: {{ lineHeightRef }}</div>{[/]}
                                        {[ if (!fontFamilyRef && !fontWeightRef && !fontSizeRef && !lineHeightRef) ]}<div class="reference-badge">Base token</div>{[/]}
                                    </div>
                                {[ elseif token.tokenType.equals("Shadow") ]}
                                    <div class="reference-badges">
                                        {[ for shadowValue in token.value ]}
                                            {[ const colorRef = getColorTokenReference(shadowValue.color) /]}
                                            {[ if colorRef ]}
                                                <div class="reference-badge small">Shadow {{ loop.index + 1 }}: {{ colorRef }}</div>
                                            {[/]}
                                        {[/]}
                                    </div>
                                {[ elseif token.tokenType.equals("Gradient") ]}
                                    <div class="reference-badges">
                                        {[ for gradientValue in token.value ]}
                                            {[ for stop in gradientValue.stops ]}
                                                {[ const colorRef = getColorTokenReference(stop.color) /]}
                                                {[ if colorRef ]}
                                                    <div class="reference-badge small">Stop: {{ colorRef }}</div>
                                                {[/]}
                                            {[/]}
                                        {[/]}
                                    </div>
                                {[ elseif isDimensionToken(token.tokenType) ]}
                                    {[ const measureRef = getMeasureTokenReference(token.value) /]}
                                    <div class="reference-badge">{{ measureRef || "Base token" }}</div>
                                {[ elseif isStringToken(token.tokenType) ]}
                                    {[ const textRef = getTextTokenReference(token.value) /]}
                                    <div class="reference-badge">{{ textRef || "Base token" }}</div>
                                {[ else ]}
                                    <div class="reference-badge">â€”</div>
                                {[/]}
                            </div>
                        {[/]}
                    </div>
                {[/]}
            </div>
            
        {[ else ]}
            {* Stack variant *}
            <div class="token-stack">
                {[ for token in tokens ]}
                    <div class="token-stack-item">
                        <span class="token-name">{{ token.name }}</span>
                        <span class="token-value">{[ inject "page_block_token_value" context token /]}</span>
                        {[ if showReferences ]}
                            <div class="stack-references">
                                {[ if token.tokenType.equals("Color") ]}
                                    {[ const colorRef = getColorTokenReference(token.value) /]}
                                    <div class="reference-list">
                                        <span class="reference-item">{{ colorRef || "Base" }}</span>
                                    </div>
                                {[ elseif token.tokenType.equals("Typography") ]}
                                    {[ const fontFamilyRef = getTextTokenReference(token.value.fontFamily) /]}
                                    {[ const fontWeightRef = getTextTokenReference(token.value.fontWeight) /]}
                                    {[ const fontSizeRef = getMeasureTokenReference(token.value.fontSize) /]}
                                    {[ const lineHeightRef = (token.value.lineHeight ? getMeasureTokenReference(token.value.lineHeight) : null) /]}
                                    
                                    <div class="reference-list">
                                        {[ if fontFamilyRef ]}<span class="reference-item">Font: {{ fontFamilyRef }}</span>{[/]}
                                        {[ if fontWeightRef ]}<span class="reference-item">Weight: {{ fontWeightRef }}</span>{[/]}
                                        {[ if fontSizeRef ]}<span class="reference-item">Size: {{ fontSizeRef }}</span>{[/]}
                                        {[ if lineHeightRef ]}<span class="reference-item">Line Height: {{ lineHeightRef }}</span>{[/]}
                                        {[ if (!fontFamilyRef && !fontWeightRef && !fontSizeRef && !lineHeightRef) ]}<span class="reference-item">Base</span>{[/]}
                                    </div>
                                {[ elseif token.tokenType.equals("Shadow") ]}
                                    <div class="reference-list">
                                        {[ for shadowValue in token.value ]}
                                            {[ const colorRef = getColorTokenReference(shadowValue.color) /]}
                                            {[ if colorRef ]}
                                                <span class="reference-item">Shadow {{ loop.index + 1 }}: {{ colorRef }}</span>
                                            {[/]}
                                        {[/]}
                                    </div>
                                {[ elseif token.tokenType.equals("Gradient") ]}
                                    <div class="reference-list">
                                        {[ for gradientValue in token.value ]}
                                            {[ for stop in gradientValue.stops ]}
                                                {[ const colorRef = getColorTokenReference(stop.color) /]}
                                                {[ if colorRef ]}
                                                    <span class="reference-item">Stop: {{ colorRef }}</span>
                                                {[/]}
                                            {[/]}
                                        {[/]}
                                    </div>
                                {[ elseif isDimensionToken(token.tokenType) ]}
                                    <div class="reference-list">
                                        {[ const measureRef = getMeasureTokenReference(token.value) /]}
                                        <span class="reference-item">{{ measureRef || "Base" }}</span>
                                    </div>
                                {[ elseif isStringToken(token.tokenType) ]}
                                    <div class="reference-list">
                                        {[ const textRef = getTextTokenReference(token.value) /]}
                                        <span class="reference-item">{{ textRef || "Base" }}</span>
                                    </div>
                                {[ else ]}
                                    <div class="reference-list">
                                        <span class="reference-item">â€”</span>
                                    </div>
                                {[/]}
                            </div>
                        {[/]}
                    </div>
                {[/]}
            </div>
        {[/]}
    </div>
    
{[ else ]}
    <div class="token-list-empty">
        <p>Enter token IDs separated by commas to display tokens with references.</p>
        <p><small>Example: spacing-xs,spacing-sm,spacing-base</small></p>
    </div>
{[/]}